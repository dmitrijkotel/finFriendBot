from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.state import State, StatesGroup
import aiosqlite
from datetime import datetime
import logging

from budget.handlers.view_budget import budget_menu_finance
from budget.finance.keyboards import back_create_transactions_keyboard as back_trans

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TRANSACTION_TYPE_EXPENSE = 'expense'
TRANSACTION_TYPE_INCOME = 'income'

# –†–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
view_transactions_router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
class FormTransaction(StatesGroup):
    waiting_for_amount = State()
    waiting_for_description = State()
    stop = State()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async def get_transactions_from_db(category_id: int, transaction_type: str):
    try:
        async with aiosqlite.connect('database.db') as conn:
            async with conn.execute(
                """SELECT id, amount, date 
                   FROM transactions 
                   WHERE category_id = ? AND type = ?
                   ORDER BY date DESC""",
                (category_id, transaction_type)
            ) as cursor:
                transactions = await cursor.fetchall()
                logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {transactions}")
                return transactions
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {e}")
        return []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
async def create_transactions_keyboard(transactions: list, back_button_callback: str, add_button_callback: str, delete_button_callback: str):
    keyboard = InlineKeyboardBuilder()

    for transaction in transactions:
        trans_id, amount, date = transaction
        button_text = f"üìÖ {date} - üí∞ {amount}‚ÇΩ"
        keyboard.add(InlineKeyboardButton(text=button_text, callback_data=f"transaction_{trans_id}"))

    keyboard.adjust(1)
    keyboard.row(
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=back_button_callback),
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data=add_button_callback),
        InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=delete_button_callback)
    )

    return keyboard.as_markup()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
async def view_transactions(message: Message, category_id: int, transaction_type: str, state: FSMContext):
    logger.info(f"–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_id}, —Ç–∏–ø {transaction_type}")
    transactions = await get_transactions_from_db(category_id, transaction_type)
    keyboard = await create_transactions_keyboard(
        transactions,
        back_button_callback=f"back_{transaction_type}_transactions_button",
        add_button_callback=f"add_{transaction_type}_transaction_button",
        delete_button_callback=f"delete_{transaction_type}_category_button_{category_id}"
    )

    if not transactions:
        await message.edit_text(f"‚ùå –ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.", reply_markup=keyboard)
    else:
        await message.edit_text(f"üìú –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π ({'—Ä–∞—Å—Ö–æ–¥–æ–≤' if transaction_type == TRANSACTION_TYPE_EXPENSE else '–¥–æ—Ö–æ–¥–æ–≤'}):", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –±—é–¥–∂–µ—Ç–æ–≤
@view_transactions_router.callback_query(F.data.endswith('_transactions_button'))
async def back_to_categories_handler(callback: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    budget_id = user_data.get('budget_id')
    logger.info(f"–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –±—é–¥–∂–µ—Ç–∞ {budget_id}")
    await budget_menu_finance(callback.message, budget_id, callback.message.message_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@view_transactions_router.callback_query(F.data.startswith('category_'))
async def handle_category_selection(callback: CallbackQuery, state: FSMContext):
    try:
        data_parts = callback.data.split('_')
        transaction_type = data_parts[1]  # 'expense' –∏–ª–∏ 'income'
        category_id = int(data_parts[2])

        await state.update_data(category_id=category_id, transaction_type=transaction_type)
        logger.info(f"–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è {category_id} –¥–ª—è {transaction_type}")
        await view_transactions(callback.message, category_id, transaction_type, state)
    except (ValueError, IndexError) as e:
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
async def get_transaction_details_db(transaction_id: int):
    try:
        async with aiosqlite.connect('database.db') as db:
            async with db.execute("""
                SELECT transactions.amount, transactions.date, transactions.description, categories.name
                FROM transactions
                JOIN categories ON transactions.category_id = categories.id
                WHERE transactions.id = ?
                """, (transaction_id,)) as cursor:
                details = await cursor.fetchone()
                logger.info(f"–î–µ—Ç–∞–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ {transaction_id}: {details}")
                return details
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ {transaction_id}: {e}")
        return None
def create_transaction_detail_keyboard(transaction_id: int, back_button_callback: str):
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data=back_button_callback))
    keyboard.add(InlineKeyboardButton(text='üóë –£–¥–∞–ª–∏—Ç—å', callback_data=f'delete_transaction_{transaction_id}'))
    return keyboard.as_markup()

@view_transactions_router.callback_query(F.data.startswith('transaction_'))
async def show_transaction_detail(callback: CallbackQuery):
    transaction_id = int(callback.data.split('_')[1])
    transaction = await get_transaction_details_db(transaction_id)
    
    if transaction:
        amount, date, description, category = transaction
        response = (
            f"üìå –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
            f"üí∞ –°—É–º–º–∞: {amount}‚ÇΩ\n"
            f"üìÖ –î–∞—Ç–∞: {date}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description or '–Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}"
        )
    else:
        response = "‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    
    keyboard = create_transaction_detail_keyboard(transaction_id, back_button_callback='back_from_transaction_detail')
    await callback.message.edit_text(response, reply_markup=keyboard)
    await callback.answer()

@view_transactions_router.callback_query(F.data.startswith('delete_transaction_'))
async def delete_transaction_handler(callback: CallbackQuery):
    try:
        transaction_id = int(callback.data.split('_')[2])
        async with aiosqlite.connect('database.db') as conn:
            await conn.execute("DELETE FROM transactions WHERE id = ?", (transaction_id,))
            await conn.commit()
        
        logger.info(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {transaction_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
        await callback.message.edit_text("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.", reply_markup=create_return_keyboard())
    except (ValueError, IndexError, aiosqlite.Error) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ {transaction_id}: {e}")
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é.")
    await callback.answer()

@view_transactions_router.callback_query(F.data.startswith('delete_'))
async def delete_category_handler(callback: CallbackQuery):
    try:
        data_parts = callback.data.split('_')
        transaction_type = data_parts[1]
        category_id = int(data_parts[4])
        
        async with aiosqlite.connect('database.db') as conn:
            await conn.execute("DELETE FROM transactions WHERE category_id = ? AND type = ?", (category_id, transaction_type))
            await conn.execute("DELETE FROM categories WHERE id = ?", (category_id,))
            await conn.commit()
        
        logger.info(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è {category_id} –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —É–¥–∞–ª–µ–Ω—ã")
        await callback.message.edit_text("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.", reply_markup=create_return_keyboard())
    except (ValueError, IndexError, aiosqlite.Error) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_id}: {e}")
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é.")
    await callback.answer()

@view_transactions_router.callback_query(F.data.startswith('add_'))
async def add_transaction_handler(callback: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    category_id = user_data.get('category_id')
    transaction_type = user_data.get('transaction_type')

    if category_id is None or transaction_type is None:
        await callback.answer("–û—à–∏–±–∫–∞: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    bot_message = await callback.message.edit_text("üìù –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:", reply_markup=back_trans)
    await state.update_data(bot_message_id=bot_message.message_id, category_id=category_id, transaction_type=transaction_type)
    await state.set_state(FormTransaction.waiting_for_amount)
    await callback.answer()

@view_transactions_router.message(FormTransaction.waiting_for_amount)
async def process_amount(message: Message, state: FSMContext):
    user_data = await state.get_data()
    await message.delete()
    
    try:
        amount = float(message.text)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª —Å—É–º–º—É: {amount}")
        await state.update_data(amount=amount)
        
        bot_message_id = user_data.get('bot_message_id')
        if bot_message_id is not None:
            await message.bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=bot_message_id,
                text="üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:",
                reply_markup=back_trans
            )
        
        await state.set_state(FormTransaction.waiting_for_description)
    except ValueError:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É: {message.text}")
        bot_message_id = user_data.get('bot_message_id')
        if bot_message_id is not None:
            await message.bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=bot_message_id,
                text="‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.",
                reply_markup=back_trans
            )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
@view_transactions_router.message(FormTransaction.waiting_for_description)
async def create_transaction_description(message: Message, state: FSMContext):
    logger.info("–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")

    try:
        await message.delete()
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message.message_id} —É–¥–∞–ª–µ–Ω–æ")
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    user_data = await state.get_data()
    logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {user_data}")

    amount = user_data.get('amount')
    category_id = user_data.get('category_id')
    transaction_type = user_data.get('transaction_type')
    description = message.text or ''
    transaction_date = datetime.now().strftime("%d-%m-%Y %H:%M:%S")
    bot_message_id = user_data.get('bot_message_id')

    if bot_message_id is not None:
        try:
            logger.info(f"–î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é: amount={amount}, description={description}, category_id={category_id}, date={transaction_date}, type={transaction_type}")
            
            async with aiosqlite.connect('database.db') as conn:
                await conn.execute(
                    """INSERT INTO transactions (amount, description, category_id, date, type)
                    VALUES (?, ?, ?, ?, ?)""",
                    (amount, description, category_id, transaction_date, transaction_type)
                )
                await conn.commit()
                logger.info("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ë–î")

                await message.bot.edit_message_text(
                    chat_id=message.chat.id,
                    message_id=bot_message_id,
                    text="‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!",
                    reply_markup=create_return_keyboard()
                )
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {bot_message_id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ: –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –ë–î: {e}")
            await message.bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=bot_message_id,
                text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
        finally:
            await state.set_state(FormTransaction.stop)
            logger.info("–°–æ—Å—Ç–æ—è–Ω–∏–µ FSM –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –≤ 'stop'")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤–æ–∑–≤—Ä–∞—Ç–∞
def create_return_keyboard():
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(text="‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="return_to_finance_menu_budget"))
    return keyboard.as_markup()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –±—é–¥–∂–µ—Ç–æ–≤
@view_transactions_router.callback_query(F.data == "return_to_finance_menu_budget")
async def return_to_budgets_handler(callback: CallbackQuery, state: FSMContext):
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –±—é–¥–∂–µ—Ç–æ–≤")
    user_data = await state.get_data()
    budget_id = user_data.get('budget_id')

    if budget_id:
        logger.info(f"–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –±—é–¥–∂–µ—Ç–∞ {budget_id}")
    else:
        logger.warning("–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –±—é–¥–∂–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")

    await budget_menu_finance(callback.message, budget_id, callback.message.message_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
@view_transactions_router.callback_query(F.data == 'back_from_transaction_detail')
async def back_to_transactions_handler(callback: CallbackQuery, state: FSMContext):
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
    user_data = await state.get_data()
    category_id = user_data.get('category_id')
    transaction_type = user_data.get('transaction_type')

    if category_id is None or transaction_type is None:
        logger.error("–û—à–∏–±–∫–∞: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer("–û—à–∏–±–∫–∞: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    logger.info(f"–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: category_id={category_id}, type={transaction_type}")
    await view_transactions(callback.message, category_id, transaction_type, state)