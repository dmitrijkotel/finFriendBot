from typing import Union
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
import aiosqlite
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from budget.database import get_budget_details_db, get_budgets_from_db
from budget.functions import create_keyboard
from budget.handlers.view_budget import create_actions_budget_keyboard, get_total_expense_by_budget, get_total_income_by_budget
from budget.keyboards import back_menu

view_expenses_category_router = Router()

async def get_expenses_categories_from_db(budget_id: int):
    async with aiosqlite.connect('database.db') as conn:
        async with conn.execute(
            "SELECT id, name FROM categories WHERE budget_id = ? AND type = ?",
            (budget_id, 'expense')
        ) as cursor:
            return await cursor.fetchall()
        
async def get_transactions_sum_by_category(category_id: int):
    async with aiosqlite.connect('database.db') as conn:
        async with conn.execute(
            "SELECT SUM(amount) FROM transactions WHERE category_id = ?",
            (category_id,)
        ) as cursor:
            result = await cursor.fetchone()
            return result[0] if result[0] is not None else 0

async def create_expenses_categories_keyboard(categories):
    keyboard = InlineKeyboardBuilder()

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    for category_id, category_name in categories:
        # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        transactions_sum = await get_transactions_sum_by_category(category_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Å—É–º–º–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        button_text = f"üìÇ {category_name} ({transactions_sum}‚ÇΩ)"
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É
        button = InlineKeyboardButton(text=button_text, callback_data=f"category_income_{category_id}")
        keyboard.add(button)
        
        keyboard.adjust(1)  # 1 –∫–Ω–æ–ø–∫–∞ –≤ —Ä—è–¥

    # –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é" –∏ "–ù–∞–∑–∞–¥" –≤ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
    keyboard.row(
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="add_expenses_category_button"),
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_expenses_categories_button")
    )

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    return keyboard.as_markup()

async def view_expenses_categories(message: Message, budget_id: int):
    categories = await get_expenses_categories_from_db(budget_id)
    keyboard = await create_expenses_categories_keyboard(categories)

    if not categories:
        await message.edit_text("üìÇ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤.", reply_markup=keyboard)
    else:
        await message.edit_text("üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞:", reply_markup=keyboard)

async def menu_budgets(callback):
    telegram_id = callback.from_user.id

    await callback.answer()

    budgets = await get_budgets_from_db(telegram_id)

    if not budgets:
        return await callback.message.answer("üìÇ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±—é–¥–∂–µ—Ç–æ–≤.", reply_markup=back_menu)

    keyboard = await create_keyboard(budgets)

    await callback.message.edit_text("üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –±—é–¥–∂–µ—Ç:", reply_markup=keyboard)

@view_expenses_category_router.callback_query(F.data == 'back_expenses_categories_button')
async def back_button_handler(callback: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    budget_id = user_data.get('budget_id')

    await budget_menu_finance(callback, budget_id)

@view_expenses_category_router.callback_query(F.data == 'expenses_budget_button')
async def view_expenses_categories_handler(callback: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    budget_id = user_data.get('budget_id')

    if budget_id is None:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –±—é–¥–∂–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    await view_expenses_categories(callback.message, budget_id)

async def get_category_details_db(category_id: int):
    async with aiosqlite.connect('database.db') as db:
        async with db.execute("SELECT name, description FROM categories WHERE id = ?", (category_id,)) as cursor:
            return await cursor.fetchone()

income_category_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='back_from_all_expenses_categories_button')]
])

@view_expenses_category_router.callback_query(F.data == 'back_from_all_expenses_categories_button')
async def back_from_all_expenses_categories_handler(callback: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    budget_id = user_data.get('budget_id')

    if budget_id is None:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –±—é–¥–∂–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    await callback.message.delete()
    await view_expenses_categories(callback.message, budget_id)

async def budget_menu_finance(event: Union[Message, CallbackQuery], budget_id):
    try:
        total_income = await get_total_income_by_budget(budget_id)
        total_expense = await get_total_expense_by_budget(budget_id)

        balance = total_income - total_expense

        budget_details = await get_budget_details_db(budget_id)
        if budget_details:
            budget_name, description = budget_details
            response_message = f"üìã –ù–∞–∑–≤–∞–Ω–∏–µ: {budget_name}\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\nüí∞ –ë–∞–ª–∞–Ω—Å: {balance}‚ÇΩ" if description else f"üìã –ù–∞–∑–≤–∞–Ω–∏–µ: {budget_name}\nüí∞ –ë–∞–ª–∞–Ω—Å: {balance}‚ÇΩ"
        else:
            response_message = "‚ùå –ë—é–¥–∂–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."

        keyboard = await create_actions_budget_keyboard(budget_id)

        if isinstance(event, CallbackQuery):  # –ï—Å–ª–∏ —ç—Ç–æ –∫–Ω–æ–ø–∫–∞ (CallbackQuery)
            await event.message.edit_text(response_message, reply_markup=keyboard)
        else:  # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await event.answer(response_message, reply_markup=keyboard)

    except Exception as e:
        if isinstance(event, CallbackQuery):
            await event.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")