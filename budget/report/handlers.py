from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, BufferedInputFile
from aiogram.fsm.state import State, StatesGroup
from budget.handlers.view_budget import budget_menu_finance
from budget.report.generation.excel import export_budget_to_excel
from budget.report.generation.jpeg import export_budget_to_jpeg
from budget.report.generation.pdf import export_budget_to_pdf
from budget.report.keyboards import report_format_keyboard, back_menu_keyboard

report_router = Router()

class DateReportBudget(StatesGroup):
    waiting_for_start_date = State()
    waiting_for_end_date = State()
    stop = State()

@report_router.callback_query(F.data == 'report_budget_button')
async def report_menu(callback: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    budget_id = user_data.get('budget_id')

    if not budget_id:
        await callback.message.answer("–û—à–∏–±–∫–∞: –±—é–¥–∂–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    await callback.message.edit_text("üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç—á—ë—Ç–∞:", reply_markup=report_format_keyboard)
    await callback.answer()

async def send_report(callback: CallbackQuery, file_stream, filename, caption, state: FSMContext):
    if file_stream is None:
        await callback.message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Ç—á—ë—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    
    # –£–¥–∞–ª—è–µ–º –º–µ–Ω—é –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –æ—Ç—á—ë—Ç–∞
    await callback.message.delete()

    file = BufferedInputFile(file_stream.read(), filename=filename)
    sent_message = await callback.message.answer_document(file, caption=caption, reply_markup=back_menu_keyboard)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—Ç—á—ë—Ç–æ–º
    await state.update_data(report_message_id=sent_message.message_id)

@report_router.callback_query(F.data == 'excel_report_format_button')
async def generate_excel_report(callback: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    budget_id = user_data.get('budget_id')

    if not budget_id:
        await callback.message.answer("–û—à–∏–±–∫–∞: ID –±—é–¥–∂–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    file_stream = export_budget_to_excel(budget_id)
    await send_report(callback, file_stream, f"–û–¢–ß–Å–¢ budget_{budget_id}.xlsx", "üìë –í–∞—à EXCEL-–æ—Ç—á—ë—Ç –ø–æ –±—é–¥–∂–µ—Ç—É.", state)

@report_router.callback_query(F.data == 'pdf_report_format_button')
async def generate_pdf_report(callback: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    budget_id = user_data.get('budget_id')

    if not budget_id:
        await callback.message.answer("–û—à–∏–±–∫–∞: ID –±—é–¥–∂–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    file_stream = export_budget_to_pdf(budget_id)
    await send_report(callback, file_stream, f"–û–¢–ß–Å–¢ budget_{budget_id}.pdf", "üìÑ –í–∞—à PDF-–æ—Ç—á—ë—Ç –ø–æ –±—é–¥–∂–µ—Ç—É.", state)

@report_router.callback_query(F.data == 'jpeg_report_format_button')
async def generate_jpeg_report(callback: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    budget_id = user_data.get('budget_id')

    if not budget_id:
        await callback.message.answer("–û—à–∏–±–∫–∞: ID –±—é–¥–∂–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    file_stream = export_budget_to_jpeg(budget_id)
    await send_report(callback, file_stream, f"–û–¢–ß–Å–¢ budget_{budget_id}.jpg", "üñº –í–∞—à JPEG-–æ—Ç—á—ë—Ç –ø–æ –±—é–¥–∂–µ—Ç—É.", state)

@report_router.callback_query(F.data == 'back_menu_button')
async def back_to_budget(callback: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    budget_id = user_data.get('budget_id')
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç—á—ë—Ç–æ–º, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    report_message_id = user_data.get('report_message_id')
    if report_message_id:
        try:
            await callback.bot.delete_message(callback.message.chat.id, report_message_id)
        except Exception:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ

    await report_menu_fun(callback, state)


async def report_menu_fun(callback: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    budget_id = user_data.get('budget_id')

    if not budget_id:
        await callback.message.answer("–û—à–∏–±–∫–∞: –±—é–¥–∂–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    await callback.message.answer("üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç—á—ë—Ç–∞:", reply_markup=report_format_keyboard)
    await callback.answer()

@report_router.callback_query(F.data == 'back_report_button')
async def back_to_budget(callback: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    budget_id = user_data.get('budget_id')

    await budget_menu_finance(callback.message, budget_id, callback.message.message_id)